#--------EXTERNAL LIBRARIES-------

import telebot
from telebot import types

import sqlite3

#-------PRESETS AND VARIABLES-----

bot = telebot.TeleBot('6652275990:AAF9kBBdNLicha65GICiHHYIhQCxitLF9Lc')



#global previousFishingStep
global rightFishingAnswers
global fishingStep
fishingStep = 0
rightFishingAnswers = 0

userId = 0

fishingTestVar = [["–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä—ã–±–∞–ª–∫—É","–í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π —Å–∞–π—Ç","–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω"],
                  ["–î–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –Ω–∞ —Å–∞–π—Ç","–î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –≤–∏—Ä—É—Å–æ–≤","–î–ª—è –∫—Ä–∞–∂–∏ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"],
                  ["–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏","–õ–æ–≥–∏–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏","–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫"],
                  ["–ü–æ –¥–ª–∏–Ω–µ","–ü–æ –Ω–∞–ª–∏—á–∏—é –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è","–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–∞–π—Ç–∞"],
                  ["–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ", "–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å", "–£–¥–∞–ª–∏—Ç—å –ø–∏—Å—å–º–æ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"],
                  ["–°–∞–π—Ç-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç","–î—É–±–ª–∏–∫–∞—Ç —Å–∞–π—Ç–∞","–ù–µ–¥–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"],
                  ["–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ", "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å"],
                  ["–§–∏–Ω.—É—á–µ—Ä–µ–∂–¥–µ–Ω–∏—è","–ì–æ—Å.—É—á—Ä–µ–∂–¥–µ–Ω–∏—è","–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ"],
                  ["–ù–µ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏—è", "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é", "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º"],
                  ["–•–∞–∫–µ—Ä—ã","–ö–∞—Ä–¥–µ—Ä—ã","–ö—Ä–∏–ø—Ç–æ—Ç–æ—Ä–≥–æ–≤—Ü—ã"],
                  ["–ê–Ω—Ç–∏–≤–∏—Ä—É—Å","–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π","–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"],
                  ["–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å", "–†–∞–∑ –≤ –º–µ—Å—è—Ü","–ö–∞–∂–¥—ã–π —Ä–∞–∑"],
                  ["–ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏","–°—Ç—Ä–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞","–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ"],
                  ["–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", "–ü–æ–º–µ–Ω—è—Ç—å –≤—Å–µ –ø–∞—Ä–æ–ª–∏","–ù–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ"],
                  ["–£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–ü–æ–ø–∞–¥–∞–Ω–∏–µ –∫ –º–æ—à–µ–Ω–Ω–∏–∫–∞–º", "–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ"]
]
@bot.message_handler(commands=['start'])

def start(message):
    separated_list = []
    global chatId
    global InlineStartMarkup
    #print(userId)

    InlineStartMarkup = types.InlineKeyboardMarkup(row_width=2)

    moreInfoButton = types.InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", callback_data="—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ")

    KeyboardMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #updateData = types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",callback_data = "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")



    InlineStartMarkup.add(moreInfoButton)
    bot.send_message(message.from_user.id, "üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —è —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    #previousMessage = message
    connectionUser = sqlite3.connect('mainDatabase.db')
    cursorUser = connectionUser.cursor()
    userId = bot.user.id
    
    userData = cursorUser.execute('SELECT tgId FROM Users')
    user = userData.fetchall()
    chatId = message.chat.id
    print(chatId)
    for separator in user:
        separated_list.extend(separator)
    print(separated_list)
    if str(chatId) not in separated_list:
            cursorUser.execute('INSERT INTO Users  (tgId) VALUES (?)', (chatId,))
            connectionUser.commit()
    connectionUser.close()
    bot.send_message(message.from_user.id, "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É",reply_markup=InlineStartMarkup)

@bot.callback_query_handler(func = lambda call: True)
def get_callback(call):

    try:
        if call.data == "—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ":
            Inlinemarkup = types.InlineKeyboardMarkup(row_width=2)

            passwordButton = types.InlineKeyboardButton("–ó–∞—â–∏—Ç–∞ –ø–∞—Ä–æ–ª–µ–π", callback_data="–ø–∞—Ä–æ–ª–∏")
            fishingButton = types.InlineKeyboardButton("–§–∏—à–∏–Ω–≥–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏", callback_data="—Ñ–∏—à–∏–Ω–≥")
            virusButton = types.InlineKeyboardButton("–í–∏—Ä—É—Å—ã", callback_data="–≤–∏—Ä—É—Å—ã")
            scamButton = types.InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–æ—à–µ–Ω–Ω–∏–∫–∏", callback_data="–º–æ—à–µ–Ω–Ω–∏–∫–∏")

            Inlinemarkup.add(passwordButton)
            Inlinemarkup.add(fishingButton)
            Inlinemarkup.add(virusButton)
            Inlinemarkup.add(scamButton)


            with open("info1.txt", "r", encoding="utf-8") as file:
                text = file.read()
                bot.send_message(call.message.chat.id, text, reply_markup=Inlinemarkup)
                file.close()

        elif call.data == "—Ñ–∏—à–∏–Ω–≥":
            with open("fishingInfo.txt", "r", encoding="utf-8") as file:
                text = file.read()
                addBackButton()
                InlineTestmarkup = types.InlineKeyboardMarkup(row_width=2)
                testButton = types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç", callback_data="fishingTest")
                InlineTestmarkup.add(testButton)

                bot.send_message(call.message.chat.id, text, reply_markup=InlineBackMarkup)
                bot.send_message(call.message.chat.id,"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ",reply_markup=InlineTestmarkup)
                file.close()

        elif call.data == "–≤–∏—Ä—É—Å—ã":
            with open("virusInfo.txt", "r", encoding="utf-8") as file:
                text = file.read()
                addBackButton()
                bot.send_message(call.message.chat.id, text, reply_markup=InlineBackMarkup)
                file.close()

        elif call.data == "–º–æ—à–µ–Ω–Ω–∏–∫–∏":
            #with open("scamInfo.txt", "r", encoding="utf-8") as file:
                #text = file.read()
            addBackButton()
            bot.send_message(call.message.chat.id, "–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç", reply_markup=InlineBackMarkup)
                #file.close()

        elif call.data == "–ø–∞—Ä–æ–ª–∏":
            with open("passwdInfo.txt", "r", encoding="utf-8") as file:
                text = file.read()
                addBackButton()
                bot.send_message(call.message.chat.id, text, reply_markup=InlineBackMarkup)
                file.close()
        if call.data == "fishingTest":
            global answer
            global question
            fishingStep = 0
            connection= sqlite3.connect('Questions.db')
            cursor = connection.cursor()
            cursor.execute('SELECT txtvalue FROM Questions WHERE Qid > ?', (fishingStep,))
            question = cursor.fetchall()
            print(question)
            cursor.execute('SELECT answer FROM Questions WHERE Qid > ?', (fishingStep,))
            answer = cursor.fetchall()
            print(answer)
            connection.close()
            startFishingTest(call)
            
        if call.data == "1" or call.data == "2" or call.data == "3":
            answer_verif(call)
            #call.data == '0'
        #-------------MAIN MENU--------------------------------

    except Exception as e:
         print(repr(e))
    if call.data == "–≤–æ–∑–≤—Ä–∞—Ç":
        returnMenu(call)


def returnMenu(call):
    try:
        Inlinemarkup = types.InlineKeyboardMarkup(row_width=2)

        passwordButton = types.InlineKeyboardButton("–ó–∞—â–∏—Ç–∞ –ø–∞—Ä–æ–ª–µ–π", callback_data="–ø–∞—Ä–æ–ª–∏")
        fishingButton = types.InlineKeyboardButton("–§–∏—à–∏–Ω–≥–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏", callback_data="—Ñ–∏—à–∏–Ω–≥")
        virusButton = types.InlineKeyboardButton("–í–∏—Ä—É—Å—ã", callback_data="–≤–∏—Ä—É—Å—ã")
        scamButton = types.InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–æ—à–µ–Ω–Ω–∏–∫–∏", callback_data="–º–æ—à–µ–Ω–Ω–∏–∫–∏")

        Inlinemarkup.add(passwordButton)
        Inlinemarkup.add(fishingButton)
        Inlinemarkup.add(virusButton)
        Inlinemarkup.add(scamButton)

        bot.send_message(call.message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=Inlinemarkup)
    except Exception as e:
         print(repr(e))


def addBackButton():
    global InlineBackMarkup
    InlineBackMarkup = types.InlineKeyboardMarkup(row_width=2)

    backButton= types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="–≤–æ–∑–≤—Ä–∞—Ç")

    KeyboardMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    return InlineBackMarkup.add(backButton)


@bot.callback_query_handler(func = lambda callback: True)
def startFishingTest(call):
    global fishingStep
    global answer
    global question
    global rightFishingAnswers


    #step = 0

    if fishingStep >= len(question):
        bot.send_message(call.message.chat.id,"–í—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ —É–∫–∞–∑–∞–Ω—ã –Ω–∏–∂–µ:")
        bot.send_message(call.message.chat.id,(str(rightFishingAnswers) +"/" + str(len(question))))
        userId = call.message.chat.id
        connectionUser = sqlite3.connect('mainDatabase.db')
        cursorUser = connectionUser.cursor()
        cursorUser.execute('UPDATE Users SET resultFishing = ? WHERE tgId = ?', (rightFishingAnswers, userId))
        rightFishingAnswers = 0
        connectionUser.commit()
        connectionUser.close()

        #userId = bot.user.id
        #cursorUser.execute()

        returnMenu(call)

        fishingStep = 0
    else:
        localMarkup = types.InlineKeyboardMarkup(row_width=2)
        frstButton = types.InlineKeyboardButton((fishingTestVar[fishingStep][0]),callback_data='1')
        scndtButton = types.InlineKeyboardButton((fishingTestVar[fishingStep][1]),callback_data='2')
        thrdButton = types.InlineKeyboardButton((fishingTestVar[fishingStep][2]),callback_data='3')
                        
        localMarkup.add(frstButton)
        localMarkup.add(scndtButton)
        localMarkup.add(thrdButton)
        bot.send_message(call.message.chat.id,question[fishingStep],reply_markup=localMarkup)

        fishingStep = fishingStep + 1

    

#@bot.callback_query_handler(func=lambda call: True)
#print(call.data)

def answer_verif(call):
    global rightFishingAnswers
    if (fishingStep - 1) >= len(answer):
        rightFishingAnswers = 0
        
    #print(fishingStep) 
    
    elif int(call.data) == answer[fishingStep - 1][0]:
        rightFishingAnswers = rightFishingAnswers + 1
    startFishingTest(call)  

    

#@bot.callback_query_handler(func = lambda call: True)




bot.polling(none_stop=True, interval=0)

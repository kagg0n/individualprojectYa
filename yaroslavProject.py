#--------EXTERNAL LIBRARIES-------

import telebot
from telebot import types

import sqlite3

#-------PRESETS AND VARIABLES-----

bot = telebot.TeleBot('6652275990:AAF9kBBdNLicha65GICiHHYIhQCxitLF9Lc')



#global previousFishingStep

global step
global rightAnswers
global switch
switch = 0
rightAnswers = 0
step = 0

userId = 0

fishingTestVar = [["–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä—ã–±–∞–ª–∫—É","–í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π —Å–∞–π—Ç","–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω"],
                  ["–î–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –Ω–∞ —Å–∞–π—Ç","–î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –≤–∏—Ä—É—Å–æ–≤","–î–ª—è –∫—Ä–∞–∂–∏ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"],
                  ["–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏","–õ–æ–≥–∏–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏","–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫"],
                  ["–ü–æ –¥–ª–∏–Ω–µ","–ü–æ –Ω–∞–ª–∏—á–∏—é –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è","–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–∞–π—Ç–∞"],
                  ["–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ", "–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å", "–£–¥–∞–ª–∏—Ç—å –ø–∏—Å—å–º–æ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"],
                  ["–°–∞–π—Ç-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç","–î—É–±–ª–∏–∫–∞—Ç —Å–∞–π—Ç–∞","–ù–µ–¥–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"],
                  ["–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ", "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å"],
                  ["–§–∏–Ω.—É—á–µ—Ä–µ–∂–¥–µ–Ω–∏—è","–ì–æ—Å.—É—á—Ä–µ–∂–¥–µ–Ω–∏—è","–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ"],
                  ["–ù–µ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏—è", "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é", "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º"],
                  ["–•–∞–∫–µ—Ä—ã","–ö–∞—Ä–¥–µ—Ä—ã","–ö—Ä–∏–ø—Ç–æ—Ç–æ—Ä–≥–æ–≤—Ü—ã"],
                  ["–ê–Ω—Ç–∏–≤–∏—Ä—É—Å","–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π","–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"],
                  ["–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å", "–†–∞–∑ –≤ –º–µ—Å—è—Ü","–ö–∞–∂–¥—ã–π —Ä–∞–∑"],
                  ["–ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏","–°—Ç—Ä–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞","–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ"],
                  ["–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", "–ü–æ–º–µ–Ω—è—Ç—å –≤—Å–µ –ø–∞—Ä–æ–ª–∏","–ù–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ"],
                  ["–£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–ü–æ–ø–∞–¥–∞–Ω–∏–µ –∫ –º–æ—à–µ–Ω–Ω–∏–∫–∞–º", "–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ"]]

virusTestVar = [["–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∑–∞—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–ø—å—Ç–µ—Ä–æ–≤","–ü–û, —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–µ–µ —Å–∫–æ—Ä–æ—Å—Ç—å –ü–ö", "–ü–û –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"],
                ["–§–∞–π–ª—ã –∏–∑ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞","–°–ø—É—Ç–Ω–∏–∫–æ–≤–æ–µ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ","–ü–æ—á—Ç–∞"],
                ["–¢—Ä–æ—è–Ω—Å–∫–∏–π –∫–æ–Ω—å","–†–µ–∫–ª–∞–º–Ω–æ–µ –ü–û", "–í–∏—Ä—É—Å-—á–µ—Ä–≤—å"],
                ["–í–∑–ª–æ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤","–ü—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º","–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º"],
                ["–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –≤–∏—Ä—É—Å","–í–∏—Ä—É—Å-—á–µ—Ä–≤—å","–†–µ–∫–ª–∞–º–Ω–æ–µ –ü–û"],
                ["–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω—Ç–≤–∏—Ä—É—Å–æ–≤","–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ü–ö","–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ Wifi"],
                ["–°–∫–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–∏—Ä—É—Å–æ–≤","–ü—Ä–æ–≤–æ–¥–∏—Ç –∫–∞–ø—Ç—á—É","–£–ª—É—á—à–∞–µ—Ç –ü–ö"],
                ["–ü–û, —Ç—Ä–µ–±—É—é—â–µ–µ –≤—ã–∫—É–ø","–ö—Ä—É–ø–Ω–∞—è –∞—Ç–∞–∫–∞ —Ö–∞–∫–µ—Ä–æ–≤","–ó–∞–¥–∞—á–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∏—Ä—É—Å–∞"],
                ["–í–∑–ª–æ–º –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤","–ü–û –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–µ–µ –¥–æ—Å—Ç—É–ø –∫ –ü–ö","–ê–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω–æ–µ –ü–û"],
                ["–ü–µ—Ä–µ–¥–∞—á–∞ —à–ø–∏–æ–Ω—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–í–∑–ª–æ–º –ø–∞—Ä–æ–ª–µ–π","–ê—Ç—Ç–∞–∫–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"],
                ["–ò—Å–ø—Ä–∞–≤–ª—è—é—Ç –Ω–µ–¥–æ—á–µ—Ç—ã –≤ –û–°","–£–¥–∞–ª—è—é—Ç –≤–∏—Ä—É—Å—ã —Å –ü–ö","–ó–∞–º–µ–¥–ª—è—é—Ç —Ä–∞–±–æ—Ç—É –ü–ö"],
                ["–í–∏—Ä—É—Å,—Å–∫—Ä—ã–≤–∞—é—â–∏–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å","–ü–û –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏","–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Ç–∏ –ü–ö",],
                ["–ó–∞–ø–∞—Ö –≥–∞—Ä–∏ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏","–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–µ–Ω–∫–∞ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ","–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ü–ö"],
                ["–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä","–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å","–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω—Ç–∏–≤–∏—Ä—É—Å"],
                ["–ü–û –¥–ª—è –∑–∞—â–∏—Ç—ã –ü–ö","–ü–û –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏","–ò–≥—Ä—ã, –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã–µ –≤–∏—Ä—É—Å–∞–º–∏"]]


passwordTestVar = [["–ü–µ—Ä–µ–±–æ—Ä –ø–∞—Ä–æ–ª–µ–π","–í–∏–¥ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞","–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –≤–∏—Ä—É—Å"],
                   ["123456","–°–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –∏–º–µ–Ω–∏","–°–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Å–ª—É—á–∞–π–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏"],
                   ["–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å","–ï—Å–ª–∏ –æ—Ñ.–∏—Å—Ç–æ—á–Ω–∏–∫, —Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å","–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å"],
                   ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ —Å–ª–æ–≤–æ","–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ","–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏"],
                   ["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–≤—É–º—è –ø–∞—Ä–æ–ª—è–º–∏","–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–≤—É–º—è —Ñ–æ—Ä–º–∞–º–∏","–ú–µ—Ç–æ–¥ —Å–≤—è–∑–∏ –¥–≤—É—Ö –±–∞–Ω–∫–æ–≤"],
                   ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏","–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏","–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ"],
                   ["–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å–ø–µ—Ü–∞–ª–≥–æ—Ä–∏—Ç–º–æ–º","–ü—É–±–ª–∏—á–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–æ–ª—è","–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"],
                   ["–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è","–ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã","–°–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è"],
                   ["–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å","–ü–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É","–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏"],
                   ["–ü–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–≥–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è","–ü–∞—Ä–æ–ª—å –Ω–∞ –Ω–æ—Å–∏–º–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ","–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"],
                   ["–ó–∞–ø–∏—Å—å –ø–∞—Ä–æ–ª—è –Ω–∞ –≤–∏–¥–Ω–æ–º –º–µ—Å—Ç–µ","–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—å–Ω—ã—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤","–•—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ–±–ª–∞–∫–µ"],
                   ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø–∞—Ä–æ–ª—å","–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–æ–ª–∏","–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –ø–∞—Ä–æ–ª–∏"],
                   ["–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏","–ü–µ—Ä–µ–±–∏—Ä–∞—Ç—å –ø–∞—Ä–æ–ª–∏","–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"],
                   ["–õ–µ–≥–∫–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º—ã–π –ø–∞—Ä–æ–ª—å","–ü–∞—Ä–æ–ª—å, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Ü–∏—Ñ—Ä","–ü–∞—Ä–æ–ª—å,—Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π"],
                   ["–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ","–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—å–Ω–æ–≥–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞","–°–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ –ø–æ—á—Ç–µ"]]


scamTestVar = [["–ú–µ—Ç–æ–¥ —Ä—ã–±–∞–ª–∫–∏","–í–∏–¥ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞","–û—á–∏—Å—Ç–∫–∞ —Ä—ã–±—ã"],
               ["–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞","–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è","–õ—é–±–∏–º—ã–π –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏"],
               ["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞","–ü–∞—Ä–æ–ª—å –æ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã","–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ"],
               ["–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å","–ï—Å–ª–∏ –æ—Ñ.–∑–∞–ø—Ä–æ—Å, —Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å","–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å"],
               ["–û–±–Ω–æ–≤–ª—è—Ç—å –∞–Ω—Ç–∏–≤–∏—Ä—É—Å","–û—Å—Ç–∞–≤–ª—è—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ","–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–π Wifi"],
               ["–û–¥–Ω–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è","–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è","–ë–µ—Å—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
               ["–ù–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø–∞–Ω–∏–∫–µ","–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∞–º–∏","–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–µ"],
               ["–ò–º—è –¥–æ–º–∞—à–Ω–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞","–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è","–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è"],
               ["–û–±–Ω–æ–≤–ª—è—Ç—å –ø–∞—Ä–æ–ª–∏","–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é","–û—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω–æ–º —Å–∞–π—Ç–µ"],
               ["–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é","–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –≤ –±–∞–Ω–∫","–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä"],
               ["–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –æ—Ç –±–æ–ª–µ–∑–Ω–∏","–í—Ä–µ–¥–æ–Ω–æ—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞","–ß—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ –¥–ª—è –ü–ö"],
               ["–ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ—á—Ç–∞","–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∫–æ–Ω—Å–µ—Ä–≤—ã","–ë–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∫–ª–∞–º—ã"],
               ["–û–±–Ω–æ–≤–∏—Ç—å –∞–Ω—Ç–∏–≤–∏—Ä—É—Å","–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å","–í—ã–∫–ª—é—á–∏—Ç—å –ü–ö"],
               ["–ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–±—â–∏–º Wifi –¥–ª—è –ø–æ–∫—É–ø–æ–∫","–ü–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å–æ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤","–ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è HTTPS"],
               ["–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ","–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω—Ç–∏–≤–∏—Ä—É—Å","–©–µ–ª–∫–∞—Ç—å –ø–æ —Å–ø–∞–º-—Å—Å—ã–ª–∫–∞–º"]]





@bot.message_handler(commands=['start'])

def start(message):
    separated_list = []
    global chatId
    global InlineStartMarkup


    InlineStartMarkup = types.InlineKeyboardMarkup(row_width=2)

    moreInfoButton = types.InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", callback_data="—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ")

    KeyboardMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    InlineStartMarkup.add(moreInfoButton)
    bot.send_message(message.from_user.id, "üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —è —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    connectionUser = sqlite3.connect('mainDatabase.db')
    cursorUser = connectionUser.cursor()
    
    userData = cursorUser.execute('SELECT tgId FROM Users')
    user = userData.fetchall()
    chatId = message.chat.id

    for separator in user:
        separated_list.extend(separator)
    
    if str(chatId) not in separated_list:
            cursorUser.execute('INSERT INTO Users  (tgId) VALUES (?)', (chatId,))
            connectionUser.commit()

    else:
        results_raw = cursorUser.execute('SELECT tgId,resultFishing,resultScam,resultVirus,resultPassword FROM Users ')
        results = results_raw.fetchall()
        connectionUser.commit()
        for i in range(len(results) - 1):
            if str(chatId) == results[i][0]:
                resultFishing = results[i][1]
                resultsScam = results[i][2]
                resultVirus = results[i][3]
                resultPassword = results[i][4]
                bot.send_message(message.from_user.id,("–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–µ—Å—Ç–∞–º: "))
                bot.send_message(message.from_user.id,("–¢–µ—Å—Ç –ø–æ —Ñ–∏—à–∏–Ω–≥—É: "+ str(resultFishing)))
                bot.send_message(message.from_user.id,("–¢–µ—Å—Ç –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–æ—à–µ–Ω–Ω–∏–∫–∞–º: "+ str(resultsScam)))
                bot.send_message(message.from_user.id,("–¢–µ—Å—Ç –ø–æ –≤–∏—Ä—É—Å–∞–º: "+ str(resultVirus)))
                bot.send_message(message.from_user.id,("–¢–µ—Å—Ç –ø–æ –ø–∞—Ä–æ–ª—è–º: "+ str(resultPassword)))


    connectionUser.close()
    bot.send_message(message.from_user.id, "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É",reply_markup=InlineStartMarkup)

@bot.callback_query_handler(func = lambda call: True)
def get_callback(call):

    try:
        if call.data == "—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ":
            Inlinemarkup = types.InlineKeyboardMarkup(row_width=2)

            passwordButton = types.InlineKeyboardButton("–ó–∞—â–∏—Ç–∞ –ø–∞—Ä–æ–ª–µ–π", callback_data="–ø–∞—Ä–æ–ª–∏")
            fishingButton = types.InlineKeyboardButton("–§–∏—à–∏–Ω–≥–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏", callback_data="—Ñ–∏—à–∏–Ω–≥")
            virusButton = types.InlineKeyboardButton("–í–∏—Ä—É—Å—ã", callback_data="–≤–∏—Ä—É—Å—ã")
            scamButton = types.InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–æ—à–µ–Ω–Ω–∏–∫–∏", callback_data="–º–æ—à–µ–Ω–Ω–∏–∫–∏")

            Inlinemarkup.add(passwordButton)
            Inlinemarkup.add(fishingButton)
            Inlinemarkup.add(virusButton)
            Inlinemarkup.add(scamButton)


            with open("info1.txt", "r", encoding="utf-8") as file:
                text = file.read()
                bot.send_message(call.message.chat.id, text, reply_markup=Inlinemarkup)
                file.close()

        elif call.data == "—Ñ–∏—à–∏–Ω–≥":
            with open("fishingInfo.txt", "r", encoding="utf-8") as file:
                text = file.read()
                addBackButton()
                InlineTestmarkup = types.InlineKeyboardMarkup(row_width=2)
                testButton = types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç", callback_data="fishingTest")
                InlineTestmarkup.add(testButton)

                bot.send_message(call.message.chat.id, text, reply_markup=InlineBackMarkup)
                bot.send_message(call.message.chat.id,"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ",reply_markup=InlineTestmarkup)
                file.close()


        elif call.data == "–≤–∏—Ä—É—Å—ã":
            with open("virusInfo.txt", "r", encoding="utf-8") as file:
                text = file.read()
                addBackButton()
                InlineTestmarkup = types.InlineKeyboardMarkup(row_width=2)
                testButton = types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç", callback_data="virusTest")

                InlineTestmarkup.add(testButton)

                bot.send_message(call.message.chat.id, text, reply_markup=InlineBackMarkup)
                bot.send_message(call.message.chat.id,"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ",reply_markup=InlineTestmarkup)

                file.close()

        elif call.data == "–º–æ—à–µ–Ω–Ω–∏–∫–∏":
            with open("scamInfo.txt", "r", encoding="utf-8") as file:
                text = file.read()
                addBackButton()
                InlineTestmarkup = types.InlineKeyboardMarkup(row_width=2)
                testButton = types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç", callback_data="scamTest")
                InlineTestmarkup.add(testButton)

                bot.send_message(call.message.chat.id, text, reply_markup=InlineBackMarkup)
                bot.send_message(call.message.chat.id,"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ",reply_markup=InlineTestmarkup)
                file.close()

        elif call.data == "–ø–∞—Ä–æ–ª–∏":
            with open("passwdInfo.txt", "r", encoding="utf-8") as file:
                text = file.read()
                addBackButton()
                InlineTestmarkup = types.InlineKeyboardMarkup(row_width=2)
                testButton = types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç", callback_data="passwdTest")
                InlineTestmarkup.add(testButton)

                bot.send_message(call.message.chat.id, text, reply_markup=InlineBackMarkup)
                bot.send_message(call.message.chat.id,"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ",reply_markup=InlineTestmarkup)
                file.close()


        if call.data == "fishingTest":
            global answer
            global question
            global switch
            #fishingStep = 0
            connection= sqlite3.connect('Questions.db')
            cursor = connection.cursor()
            cursor.execute('SELECT txtvalue FROM Questions WHERE Qid > ?', (0,))
            question = cursor.fetchall()
            cursor.execute('SELECT answer FROM Questions WHERE Qid > ?', (0,))
            answer = cursor.fetchall()
            connection.close()
            switch = "fishing"
            startTest(call)

        elif call.data == "virusTest":
            
            connection= sqlite3.connect('Questions1.db')
            cursor = connection.cursor()
            cursor.execute('SELECT txtvalue FROM Questions WHERE Qid > ?', (0,))
            question = cursor.fetchall()
            cursor.execute('SELECT answer FROM Questions WHERE Qid > ?', (0,))
            answer = cursor.fetchall()
            connection.close()
            switch = "virus"
            startTest(call)

        elif call.data == "scamTest":

            connection= sqlite3.connect('Questions3.db')
            cursor = connection.cursor()
            cursor.execute('SELECT txtvalue FROM Questions WHERE Qid > ?', (0,))
            question = cursor.fetchall()
            cursor.execute('SELECT answer FROM Questions WHERE Qid > ?', (0,))
            answer = cursor.fetchall()
            connection.close()
            switch = "scam"
            startTest(call)

        elif call.data == "passwdTest":

            connection= sqlite3.connect('Questions2.db')
            cursor = connection.cursor()
            cursor.execute('SELECT txtvalue FROM Questions WHERE Qid > ?', (0,))
            question = cursor.fetchall()
            cursor.execute('SELECT answer FROM Questions WHERE Qid > ?', (0,))
            answer = cursor.fetchall()
            connection.close()
            switch = "password"
            startTest(call)

        
            
        if call.data == "1" or call.data == "2" or call.data == "3":
          
            answer_verif(call)
           
    except Exception as e:
         print(repr(e))
    if call.data == "–≤–æ–∑–≤—Ä–∞—Ç":
        returnMenu(call)


def returnMenu(call):
    connectionUser = sqlite3.connect('mainDatabase.db')
    cursorUser = connectionUser.cursor()
    chatId = call.message.chat.id
    try:
        results_raw = cursorUser.execute('SELECT tgId,resultFishing,resultScam,resultVirus,resultPassword FROM Users ')
        results = results_raw.fetchall()
        connectionUser.commit()
        connectionUser.close()
        for i in range(len(results) - 1):
            if str(chatId) == results[i][0]:
                resultFishing = results[i][1]
                resultsScam = results[i][2]
                resultVirus = results[i][3]
                resultPassword = results[i][4]
                bot.send_message(call.message.chat.id,("–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–µ—Å—Ç–∞–º: "))
                bot.send_message(call.message.chat.id,("–¢–µ—Å—Ç –ø–æ —Ñ–∏—à–∏–Ω–≥—É: "+ str(resultFishing)))
                bot.send_message(call.message.chat.id,("–¢–µ—Å—Ç –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–æ—à–µ–Ω–Ω–∏–∫–∞–º: "+ str(resultsScam)))
                bot.send_message(call.message.chat.id,("–¢–µ—Å—Ç –ø–æ –≤–∏—Ä—É—Å–∞–º: "+ str(resultVirus)))
                bot.send_message(call.message.chat.id,("–¢–µ—Å—Ç –ø–æ –ø–∞—Ä–æ–ª—è–º: "+ str(resultPassword)))
        

    except Exception as e:
        print(repr(e))

    try:
        Inlinemarkup = types.InlineKeyboardMarkup(row_width=2)

        passwordButton = types.InlineKeyboardButton("–ó–∞—â–∏—Ç–∞ –ø–∞—Ä–æ–ª–µ–π", callback_data="–ø–∞—Ä–æ–ª–∏")
        fishingButton = types.InlineKeyboardButton("–§–∏—à–∏–Ω–≥–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏", callback_data="—Ñ–∏—à–∏–Ω–≥")
        virusButton = types.InlineKeyboardButton("–í–∏—Ä—É—Å—ã", callback_data="–≤–∏—Ä—É—Å—ã")
        scamButton = types.InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–æ—à–µ–Ω–Ω–∏–∫–∏", callback_data="–º–æ—à–µ–Ω–Ω–∏–∫–∏")

        Inlinemarkup.add(passwordButton)
        Inlinemarkup.add(fishingButton)
        Inlinemarkup.add(virusButton)
        Inlinemarkup.add(scamButton)

        bot.send_message(call.message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=Inlinemarkup)
    except Exception as e:
         print(repr(e))


def addBackButton():
    global InlineBackMarkup
    InlineBackMarkup = types.InlineKeyboardMarkup(row_width=2)

    backButton= types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="–≤–æ–∑–≤—Ä–∞—Ç")

    KeyboardMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    return InlineBackMarkup.add(backButton)


@bot.callback_query_handler(func = lambda callback: True)
def startTest(call):
    global step
    global rightAnswers
    global answer
    global question
    global switch


    #step = 0

    if step >= len(question):
        bot.send_message(call.message.chat.id,"–í—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ —É–∫–∞–∑–∞–Ω—ã –Ω–∏–∂–µ:")
        bot.send_message(call.message.chat.id,(str(rightAnswers) +"/" + str(len(question))))
        userId = call.message.chat.id
        connectionUser = sqlite3.connect('mainDatabase.db')
        cursorUser = connectionUser.cursor()
        if switch == "fishing":
            cursorUser.execute('UPDATE Users SET resultFishing = ? WHERE tgId = ?', (rightAnswers, userId))

        if switch == "virus":
            cursorUser.execute('UPDATE Users SET resultVirus = ? WHERE tgId = ?', (rightAnswers, userId))

        if switch == "scam":
            cursorUser.execute('UPDATE Users SET resultScam = ? WHERE tgId = ?', (rightAnswers, userId))
        
        if switch == "password":
            cursorUser.execute('UPDATE Users SET resultPassword = ? WHERE tgId = ?', (rightAnswers, userId))

        connectionUser.commit()
        connectionUser.close()

        returnMenu(call)

        step = 0
    else:
        localMarkup = types.InlineKeyboardMarkup(row_width=1)
        
        if switch == "fishing":
            frstButton = types.InlineKeyboardButton((fishingTestVar[step][0]),callback_data='1')
            scndtButton = types.InlineKeyboardButton((fishingTestVar[step][1]),callback_data='2')
            thrdButton = types.InlineKeyboardButton((fishingTestVar[step][2]),callback_data='3')

        elif switch == "virus":
            frstButton = types.InlineKeyboardButton((virusTestVar[step][0]),callback_data='1')
            scndtButton = types.InlineKeyboardButton((virusTestVar[step][1]),callback_data='2')
            thrdButton = types.InlineKeyboardButton((virusTestVar[step][2]),callback_data='3')

        elif switch == "scam":
            frstButton = types.InlineKeyboardButton((scamTestVar[step][0]),callback_data='1')
            scndtButton = types.InlineKeyboardButton((scamTestVar[step][1]),callback_data='2')
            thrdButton = types.InlineKeyboardButton((scamTestVar[step][2]),callback_data='3')
        
        elif switch == "password":
            frstButton = types.InlineKeyboardButton((passwordTestVar[step][0]),callback_data='1')
            scndtButton = types.InlineKeyboardButton((passwordTestVar[step][1]),callback_data='2')
            thrdButton = types.InlineKeyboardButton((passwordTestVar[step][2]),callback_data='3')

                        
        localMarkup.add(frstButton)
        localMarkup.add(scndtButton)
        localMarkup.add(thrdButton)

        bot.send_message(call.message.chat.id,question[step],reply_markup=localMarkup)

        step = step + 1

    
def answer_verif(call):
    global switch
    global rightAnswers
    global step

    if (step - 1) >= (len(answer)):

        rightAnswers= 0
        
    
    elif int(call.data) == answer[step - 1][0]:
        rightAnswers = rightAnswers + 1

    startTest(call)  


bot.polling(none_stop=True, interval=0)
